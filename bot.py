import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('BOT_TOKEN')
WEBAPP_URL = os.environ.get('WEBAPP_URL')

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ Daggerheart", web_app=WebAppInfo(url=WEBAPP_URL))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}, üé≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã:",
        reply_markup=reply_markup
    )

async def any_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –ª—é–±–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã"""
    text = update.message.text.lower()
    
    if any(word in text for word in ['—Å—Ç–∞—Ä—Ç', 'start', '–∏–≥—Ä–∞', 'daggerheart', '–∏–≥—Ä–∞—Ç—å']):
        user = update.effective_user
        
        keyboard = [
            [InlineKeyboardButton("üéÆ Daggerheart", web_app=WebAppInfo(url=WEBAPP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üé≤ {user.first_name}, –≥–æ –∏–≥—Ä–∞—Ç—å!",
            reply_markup=reply_markup
        )

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start_command))
    
    app.add_handler(MessageHandler(
        filters.TEXT & (filters.Entity("mention") | filters.Regex(r'(?i)(—Å—Ç–∞—Ä—Ç|start|–∏–≥—Ä–∞|daggerheart|–∏–≥—Ä–∞—Ç—å)')), 
        any_mention
    ))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø!")
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()