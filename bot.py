import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')

if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)
    
if not WEBAPP_URL:
    logger.error("WEBAPP_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –∑–∞–ø—É—Å–∫ Mini App"""
    try:
        user = update.effective_user
        
        keyboard = [[
            InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –≤ Daggerheart", web_app=WebAppInfo(url=WEBAPP_URL))
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"üé≠ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\nüé≤ –ó–∞–ø—É—Å–∫–∞–π Daggerheart –∏ —Å–æ–∑–¥–∞–≤–∞–π —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!"
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        
        logger.info("ü§ñ –ë–æ—Ç Daggerheart –∑–∞–ø—É—â–µ–Ω!")
        
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)

if __name__ == '__main__':
    main()